#trigger:
#- main

#pool:
#  vmImage: 'ubuntu-latest'

#stages:
#- stage: Build
#  jobs:
#  - job: BuildAndPush
#    steps:
#    - task: Docker@2
#      inputs:
#        command: 'buildAndPush'
#        repository: 'your-app'
#        dockerfile: 'Dockerfile'
#        containerRegistry: 'your-acr'

#- stage: Deploy
#  jobs:
#  - job: DeployToK8s
#    steps:
#    - task: KubernetesManifest@0
#      inputs:
#        action: 'deploy'
#        kubernetesServiceConnection: 'your-aks'


trigger:
- main

pool:
  name: 'Default'
  demands:
  - agent.name -equals local-agent

variables:
  dockerRegistryServiceConnection: 'dockerhub-connection'
  imageRepository: 'trascendant/proyecto-redes'
  containerRegistry: 'docker.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'
  kubernetesServiceConnection: 'aks-connection'

stages:
- stage: Build
  displayName: 'Build and Push Docker Image'
  jobs:
  - job: Build
    displayName: 'Build Docker Image'
    steps:
    - task: Docker@2
      displayName: 'Build Docker Image'
      inputs:
        command: 'build'
        dockerfile: '$(dockerfilePath)'
        tags: |
          $(tag)
          latest
        repository: '$(imageRepository)'
    
    - task: Docker@2
      displayName: 'Push Docker Image'
      inputs:
        command: 'push'
        repository: '$(imageRepository)'
        tags: |
          $(tag)
          latest
        containerRegistry: '$(dockerRegistryServiceConnection)'

- stage: Deploy
  displayName: 'Deploy to Local'
  dependsOn: Build
  jobs:
  - job: Deploy
    displayName: 'Deploy Application'
    steps:
    - task: PowerShell@2
      displayName: 'Deploy New Container'
      inputs:
        targetType: 'inline'
        script: |
          try {
            docker stop proyecto-redes
            docker rm proyecto-redes
          } catch {
            Write-Host "No previous container found"
          }
          
          docker run -d --name proyecto-redes -p 5000:5000 $(imageRepository):$(tag)
          Start-Sleep -Seconds 10
          
          $response = Invoke-WebRequest -Uri "http://localhost:5000/health" -UseBasicParsing -TimeoutSec 5
          if ($response.StatusCode -eq 200) {
            Write-Host "Application deployed successfully"
          } else {
            exit 1
          }

- stage: DeployToKubernetes
  displayName: 'Deploy to AKS'
  dependsOn: Build
  jobs:
  - job: DeployAKS
    displayName: 'Deploy to Kubernetes'
    steps:
    - task: KubernetesManifest@0
      displayName: 'Deploy to AKS'
      inputs:
        action: 'deploy'
        kubernetesServiceConnection: '$(kubernetesServiceConnection)'
        namespace: 'default'
        manifests: |
          $(Build.SourcesDirectory)/k8s/deployment.yaml
        containers: '$(imageRepository):$(tag)'
    
    - task: Kubernetes@1
      displayName: 'Get Service Status'
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: '$(kubernetesServiceConnection)'
        command: 'get'
        arguments: 'service proyecto-redes-service'